@model KSUAdvising.Models.AdminViewModel
@using Newtonsoft.Json
@{
    ViewBag.Title = "Index";
}
@section Scripts {

<script type="text/JavaScript">
    //getting the autogenerated hub proxy
    var alertHubProx = $.connection.alertHub;
    var walkinLineChart;
    var walkinVsAppointmentChart;
    var walkinAvgWait;

    $(document).ready(function () {
        //starts connection
        $.connection.hub.start();

        //show Home by Default
        showPanel(0);

        //setting up chart
        seedAnalytics();

        //seeds existing walkin advisers
        var existingAdviser = @Html.Raw(JsonConvert.SerializeObject(Model.currentAdviserWalkinQueueFlashline));
        for(var i = 0; i < existingAdviser.length; ++i)
        {
            //check if already loaded in DOM
            if(!$("#li_" + existingAdviser[i]).length){
                addAdviserQueue(existingAdviser[i]);
            }
        }

        //ataches an event handler for advisers in and out of walkin queue by there doing
        alertHubProx.client.addAdviserInQueue = function (name, message) {
            $.jGrowl(name + " " + message, { life: 2500, theme: 'walkinAvailibility' });
            addAdviserQueue(name);
        };

        alertHubProx.client.removeAdviserFromQueue = function (name, message) {
            $.jGrowl(name + " " + message, { life: 2500, theme: 'walkinAvailibility' });
            removeAdviserQueue(name);
        };

        //event handlers for current advisers in and out of queue by force removal or addition
        alertHubProx.client.forceAddAdviserInQueue= function (name, message) {
            //no alert here because we did this
            addAdviserQueue(name);
        };

        alertHubProx.client.forceRemoveAdviserFromQueue = function(name, message){
            //no alert because we did this
            removeAdviserQueue(name);
        }

        //loads default college settings into correct boxes
        var currentMinEarly = @Html.Raw(JsonConvert.SerializeObject(Model.CollegeSetting.MinutesAllowedEarly));
        $("#setEarly").text(currentMinEarly);
        var currentMinLate =  @Html.Raw(JsonConvert.SerializeObject(Model.CollegeSetting.MinutesAllowedLate));
        $("#setLate").text(currentMinLate);
        var currentNumWalkin = @Html.Raw(JsonConvert.SerializeObject(Model.CollegeSetting.NumberWalkinAllowed));
        $("#setWalkin").text(currentNumWalkin);

        //attaches event handler for submitting college settings
        $("#save_changes_button").click(function(){
            submitSettingsChanges();
        });

        //attaches event handlers for differnet plus and minus on settings
        $("#volumeUpMinutes").click(function(){
            updateMinutesEarly(0);
        });
        $("#volumeDownMinutes").click(function(){
            updateMinutesEarly(1);
        });
        $("#volumeUpLate").click(function(){
            updateMinutesLate(0);
        });
        $("#volumeDownLate").click(function(){
            updateMinutesLate(1);
        });
        $("#volumeUpWalkin").click(function(){
            updateNumberWalkin(0);
        });
        $("#volumeDownWalkin").click(function(){
            updateNumberWalkin(1);
        });

        //attaching event handlers to top buttons to show/hide correct panels
        $("#home_button").click(function () {
            switchLayout(0);
        });

        $("#college_settings_button").click(function () {
            switchLayout(1);
        });

        $("#adviser_queue_button").click(function () {
            switchLayout(2);
        });

        $("#user_add_button").click(function () {
            switchLayout(3);
        });

        //attaching event handlers to walkin queue functionality
        $("#walkinAddButton").click(function(){
            forceAddAdviser($("#forceAddFlashlineID").val());
        });

    });

    //************************************************************************
    //CODE FOR UPDATING THE LAYOUT
    function switchLayout(buttonID) {
        switch (buttonID) {
            case 0:
                showPanel(0);
                break;
            case 1:
                showPanel(1);
                break;
            case 2:
                showPanel(2);
                break;
            case 3:
                showPanel(3);
                break;
            default:
                //nothing
        }
    }

    function addAdviserQueue(name) {
        var liText = "<li class='accordion-navigation' id='li_"+name+"'><a href=''>"+name+"<i class='fi-trash right'></i></a></li>";
        $("#walkin_adviser_queue_ul").append(liText);

        //attaches event handler to trash can
        $(".fi-trash").click(function(){
            forceReturnAdviserToQueue($(this).parent().text());
        });
    }

    function removeAdviserQueue(name) {
        $("#li_" + name).remove();
    }

    function showPanel(panel) {
        //based on what integer is passed hide other panels and show correct one
        var panels = ["#home_panel", "#college_settings_panel", "#adviser_queue_panel", "#user_add_panel"];
        var buttons = ["#home_button i", "#college_settings_button i", "#adviser_queue_button i", "#user_add_button i"];
        for (var i = 0; i < 4; ++i) {
            if (panel != i) {
                $(panels[i]).css("display", "none");
                $(buttons[i]).removeClass("iconActive");
            }
            else {
                $(panels[i]).css("display", "block");
                $(buttons[i]).addClass("iconActive");
            }
        }
    }
    //************************************************************************


    //************************************************************************
    //CODE FOR FORCE ADDING AN ADVISER
    function forceAddAdviser(forceAddFlashlineID){

        //gets check adviser URL
        var checkAdviserUrl = '@Url.Action("CheckAdviser")';
        //ensure that the user entered something to not make pointless web request
        if(forceAddFlashlineID != '')
        {
            //checks to see if adviser exists
            $.ajax(
           {
               url: checkAdviserUrl,
               type: 'POST',
               data: {'adviserFlashlineID': forceAddFlashlineID},
               success: function (data) {
                   if(data.doesExist == "True"){
                       //confirm with user this is the adviser they would like to add
                       $.blockUI({
                           message:$("<p>Are you sure you'd like to add " + data.adviserFirst +" " + data.adviserLast + " to the walkin queue?</p><br/><br/><a onClick='forceAddConfirmed(false)' class='button alert'>No</a>&nbsp;<a onClick='forceAddConfirmed(true)' class='button alert'>Yes</a>" ),
                           css: { backgroundColor: '#F9B71B'}
                       });
                   }
                   else{
                       //inform user that no such adviser exists
                       $.blockUI({
                           message:$("<h3>Sorry, no adviser with flashlineID " + forceAddFlashlineID+ " exists</h3>" ),
                           css: { backgroundColor: '#F9B71B'},
                           timeout: 2000
                       });
                   }
               },
               error: function (jqXHR, textStatus, errorThrown) {

               }
           });
        }
    }

    function forceAddConfirmed(isConfirmed, forceAddFlashlineID){
        $.unblockUI();
        if(isConfirmed){
            //gets flashlineID to send to server
            var flashlineID = $("#forceAddFlashlineID").val();
            //gets url for updateAdviserStatus
            var url = '@Url.Action("UpdateAdviserStatus")';
            //submits ajax call to change status
            $.ajax(
           {
               url: url,
               type: 'POST',
               data: {'adviserFlashlineID': flashlineID, isAvailable: true},
               success: function (data) {
                   //if success submit signalR notification
                   $.connection.hub.start().done(function () {
                       alertHubProx.server.forceAdviserInQueue(flashlineID, " was added to the queue by an Administrator");
                   });
               },
               error: function (jqXHR, textStatus, errorThrown) {

               }
           });
        }
    }

    function forceReturnAdviserToQueue(flashlineID){

        //gets url for updateAdviserStatus
        var url = '@Url.Action("UpdateAdviserStatus")';
        //submits ajax call to change status
        $.ajax(
       {
           url: url,
           type: 'POST',
           data: {'adviserFlashlineID': flashlineID, isAvailable: false},
           success: function (data) {
               //if success submit signalR notification
               $.connection.hub.start().done(function () {
                   alertHubProx.server.forceAdviserOutQueue(flashlineID, " was removed from the queue by an Administrator");
               });
           },
           error: function (jqXHR, textStatus, errorThrown) {

           }
       });
    }
    //************************************************************************

    //************************************************************************
    //CODE FOR CHANGING COLLEGE SETTINGS
    function updateMinutesEarly(upDown){
        var currentMinutes = parseInt($("#setEarly").text());
        if(upDown == 0)//increase minutes
        {
            if((currentMinutes < 30))
            {
                currentMinutes = currentMinutes + 1;
            }
        }
        else{//decrease Minutes
            if(currentMinutes > 0)
            {
                currentMinutes = currentMinutes - 1;
            }
        }

        $("#setEarly").html("");
        $("#setEarly").text(currentMinutes);
    };

    function updateMinutesLate(upDown){
        var currentMinutes = parseInt($("#setLate").text());
        if(upDown == 0)//increase minutes
        {
            if((currentMinutes < 30))
            {
                currentMinutes = currentMinutes + 1;
            }
        }
        else{//decrease Minutes
            if(currentMinutes > 0)
            {
                currentMinutes = currentMinutes - 1;
            }
        }

        $("#setLate").html("");
        $("#setLate").text(currentMinutes);
    };

    function updateNumberWalkin(upDown){
        var currentNumber = parseInt($("#setWalkin").text());
        if(upDown == 0)//increase minutes
        {
            if((currentNumber < 20))
            {
                currentNumber = currentNumber + 1;
            }
        }
        else{//decrease Minutes
            if(currentNumber > 0)
            {
                currentNumber = currentNumber - 1;
            }
        }

        $("#setWalkin").html("");
        $("#setWalkin").text(currentNumber);
    };

    function submitSettingsChanges(){
        var earlyMinutes = parseInt($("#setEarly").text());
        var lateMinutes = parseInt( $("#setLate").text());
        var numWalkins = parseInt($("#setWalkin").text());

        var url = '@Url.Action("UpdateCollegeSettings")';

        //submit the async call
        $.ajax(
        {
            url: url,
            type: 'POST',
            data: {'minEarly': earlyMinutes , 'minLate': lateMinutes, 'numWalkin': numWalkins },
            success: function (data) {
                $.jGrowl("Settings have been changed for this college", { life: 2500, theme: 'walkinAvailbility' });
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });


    }

    //************************************************************************

    //
    function seedAnalytics(){
        var ctxAvgWaitTime = $("#averageWaitDonut").get(0).getContext("2d");
        var dataDonut = [
            {
                value: 12,
                color:"rgba(135, 150, 55, .6)",
                highlight: "rgba(135, 150, 55, 1)",
                label: "Time Waiting"
            },
            {
                value: 10,
                color: "rgba(135, 150, 55, .1)",
                highlight: "rgba(135, 150, 55, 1)",
                label: "Maximum Wait Time Allowed"
            }
        ]
        walkinAvgWait = new Chart(ctxAvgWaitTime).Doughnut(dataDonut, {
            responsive:true,
            multiTooltipTemplate: "<%= datasetLabel %> - <%= value %>"
        });;

        var ctxWalkinVsAppt = $("#walkinVsAppointmentBar").get(0).getContext("2d");
        //walkin vs appointment data
        var dataVs = {
            labels: ["January", "February", "March", "April", "May", "June", "July"],
            datasets: [
                {
                    label: "Appointments",
                    fillColor: "rgba(0, 38, 100, .5)",
                    strokeColor: "rgba(220,220,220,0.8)",
                    highlightFill: "rgba(0, 38, 100, 1)",
                    highlightStroke: "rgba(0, 38, 100, 1)",
                    data: [65, 59, 80, 81, 56, 55, 40]
                },
                {
                    label: "Walkin",
                    fillColor: "rgba(234, 171, 0, .5)",
                    strokeColor: "rgba(151,187,205,0.8)",
                    highlightFill: "rgba(234, 171, 0, 1)",
                    highlightStroke: "rgba(234, 171, 0, 1)",
                    data: [28, 48, 40, 19, 86, 27, 90]
                },
                {
                label: "No Show",
                fillColor: "rgba(158, 35, 69, 0.5)",
                strokeColor: "rgba(151,187,205,0.8)",
                highlightFill: "rgba(158, 35, 69, 1)",
                highlightStroke: "rgba(158, 35, 69, 1)",
                data: [8, 4, 4, 10, 12, 3, 7]
                }
            ]
        };
        walkinVsAppointmentChart = new Chart(ctxWalkinVsAppt).Bar(dataVs, {
            responsive:true,
            multiTooltipTemplate: "<%= datasetLabel %> - <%= value %>"
        });


        //walkin data
        // Get context with jQuery - using jQuery's .get() method.
        var ctxWalkin = $("#walkinLineChart").get(0).getContext("2d");
        var dataWalkin = {
            labels: ["January", "February", "March", "April", "May", "June", "July"],
            datasets: [
                {
                    label: "Walk In Appointments",
                    fillColor: "rgba(234, 171, 0, .5)",
                    strokeColor: "rgba(220,220,220,1)",
                    pointColor: "rgba(220,220,220,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(220,220,220,1)",
                    data: [65, 59, 80, 81, 56, 55, 40]
                }
            ]
        };
        // This will get the first returned node in the jQuery collection.
        myLineChart = new Chart(ctxWalkin).Line(dataWalkin,{
            responsive:true
        });
    }

</script>
}
<style>
    .alert{
        background-color:#132B8B !important;
    }
   
    .fi-trash{
        font-size: 20px;
    }
</style>
<div id="navbar" class="icon-bar four-up">
    <a id="home_button" class="item">
        <i class="fi-graph-trend iconActive"></i>
    </a>
    <a id="college_settings_button" class="item">
        <i class="fi-wrench"></i>
    </a>
    <a id="adviser_queue_button" class="item">
        <i class="fi-torso-business"></i>
    </a>
    <a id="user_add_button" class="item">
        <i class="fi-folder-add"></i>
    </a>
</div>

<div class="row">
    
    <div id="home_panel" style="text-align:center;"class="small-11 small-centered columns">
        <h3> Today's Average Wait Time</h3>
        <canvas id="averageWaitDonut" width="800" height="400"></canvas>
        <br/><br/><br />
        <h3>Appointment Types</h3>
        <canvas id="walkinVsAppointmentBar" width="800" height="400"></canvas>
        <br/><br/><br />
        <h3>Walkins</h3>
        <canvas id="walkinLineChart" width="800" height="400"></canvas>
        <br/><br /><br />
    </div>

    <div id="college_settings_panel" class="small-11 small-centered columns">
        <fieldset>
            <legend>College Settings</legend>
            <br/><br/>

            Minutes Allowed Early
            <div class="row" style="margin-left:5px;">

                <ul class="button-group">
                    <li><a id="volumeUpMinutes" class="button"><i class="fi-plus"></i></a></li>
                    <li><a id="volumeDownMinutes" class="button"><i class="fi-minus"></i></a></li>
                    <li><a class="button alert"><span id="setEarly"></span></a></li>
                </ul>
            </div>
            <br/><br/>

            Minutes Allowed Late
            <div class="row" style="margin-left:5px;">

                <ul class="button-group">
                    <li><a id="volumeUpLate" class="button"><i class="fi-plus"></i></a></li>
                    <li><a id="volumeDownLate" class="button"><i class="fi-minus"></i></a></li>
                    <li><a class="button alert"><span id="setLate"></span></a></li>
                </ul>
            </div>
            <br/><br/>
           Number of Walkins Allowed
            <div class="row" style="margin-left:5px;">

                <ul class="button-group">
                    <li><a id="volumeUpWalkin" class="button"><i class="fi-plus"></i></a></li>
                    <li><a id="volumeDownWalkin" class="button"><i class="fi-minus"></i></a></li>
                    <li><a class="button alert"><span id="setWalkin"></span></a></li>
                </ul>
            </div>
            <br/><br/>
            <a id="save_changes_button" class="button alert"><span class="show-for-medium-up">Save changes</span> <i class="fi-lock"></i></a>
            <br/><br/>
            <a id="loginAsAdviser" href='@Url.Action("Index","Adviser")' class="button alert"><span class="show-for-medium-up">Login as Advisor</span> <i class="fi-shield"></i></a>
      </fieldset>
</div>
    
    <div id="adviser_queue_panel" style="display:none;" class="small-11 small-centered columns">
        <ul id="walkin_adviser_queue_ul" class="accordion" data-accordion></ul>
        <br/><br/><br/>
        <form action="" autocomplete="off" data-abide>
            <fieldset>
                <legend>Add Adviser to Queue</legend>
                <div class="row collapse postfix-radius">
                    <div class="email-field small-6 columns">
                        <label>
                            <input id="forceAddFlashlineID" type="text" name="UserName" placeholder="Flashline ID" required>
                        </label>
                        <small class="error">Please give adviser flashline ID</small>
                    </div>
                    <div class="small-6 columns">
                        <span class="postfix">@@kent.edu</span>
                    </div>
                </div>
            </fieldset>
            <a class="button success" id="walkinAddButton">Add Adviser to Walkin</a>
        </form>
</div>

    <div id="user_add_panel" style="display:none;" class="small-11 small-centered columns">

        <form action="Admin/AddAdviser" autocomplete="off" data-abide>
            <fieldset>
                <legend>Add Adviser</legend>
                <div>
                    <label>
                        <input type="text" name="adviserBannerID" placeholder="Banner ID" id="adviserBannerID" required>
                    </label>
                    <small class="error">A Banner ID is required</small>
                </div>
                <div>
                    <label>
                        <input type="text" name="adviserFirstName" placeholder="First Name" id="adviserFirstName" required>
                    </label>
                    <small class="error">A First Name is required</small>
                </div>
                <div>
                    <label>
                        <input type="text" name="adviserLastName" placeholder="Last Name" id="adviserLastName" required>
                    </label>
                    <small class="error">A Last Name is required</small>
                </div>
                <div class="row collapse postfix-radius">
                    <div class="email-field small-6 columns">
                        <label>
                            <input id="adviserFlashlineID" type="text" name="adviserFlashlineID" placeholder="FlashlineID" required>
                        </label>
                        <small class="error">A flashline ID is required.</small>
                    </div>
                    <div class="small-6 columns">
                        <span class="postfix">@@kent.edu</span>
                    </div>
                </div>
            </fieldset>
            <input type="submit" class="button success" value="Add Adviser" id="addAdviserButton" />
        </form>

        <br/><br/>

        <form action="Admin/AddAdministrativeAssistant" autocomplete="off" data-abide>
            <fieldset>
                <legend>Add Administrative Assistant</legend>
                <div>
                    <label>
                        <input type="text" name="adminAssistBannerID" placeholder="Banner ID" id="adminAssistBannerID" required>
                    </label>
                    <small class="error">A Banner ID is required</small>
                </div>
                <div>
                    <label>
                        <input type="text" name="adminAssistFirstName" placeholder="First Name" id="adminAssistFirstName" required>
                    </label>
                    <small class="error">A First Name is required</small>
                </div>
                <div>
                    <label>
                        <input type="text" name="adminAssistLastName" placeholder="Last Name" id="adminAssistLastName" required>
                    </label>
                    <small class="error">A Last Name is required</small>
                </div>
                <div class="row collapse postfix-radius">
                    <div class="email-field small-6 columns">
                        <label>
                            <input id="adminAssistFlashlineID" type="text" name="adminAssistFlashlineID" placeholder="FlashlineID" required>
                        </label>
                        <small class="error">A flashline ID is required.</small>
                    </div>
                    <div class="small-6 columns">
                        <span class="postfix">@@kent.edu</span>
                    </div>
                </div>
            </fieldset>
            <input type="submit" class="button success" value="Add Administrative Assistant" id="addAdministrativeAssistant" />
        </form>
    </div>

    </div>

@Scripts.Render("~/Scripts/Chart.min.js")