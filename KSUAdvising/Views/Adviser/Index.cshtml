@model KSUAdvising.Models.AdviserViewModel
@using Newtonsoft.Json
@{
    ViewBag.Title = "Index";
}
@section Scripts {
    <script type="text/JavaScript">
    //getting the autogenerated hub proxy
        var alertHubProx = $.connection.alertHub;
    //gets adviser flashlineID to view only pertinent event information
    var instanceAdviserFlashlineID = @Html.Raw(JsonConvert.SerializeObject(Model.Adviser.FlashlineID));
    $(document).ready(function () {


        //starts connection
        $.connection.hub.start();

        //attaches event handler for students arriving for appointments
        alertHubProx.client.addAppointmentArrivalNotification = function(studentFlashlineID, adviserFlashlineID, arrivalTime){
            if(adviserFlashlineID == instanceAdviserFlashlineID)
            {
                //shows message
                $.jGrowl(studentFlashlineID + " has arrived for their appointment"  , { life: 2500, theme: 'walkinAvailibility' });

                //plays sound
                playAlert();

                //adds arrival time
                $("#ul_appt_"+studentFlashlineID).find(".arrivalTime").text(arrivalTime);

                //changes div style
                $("#ul_appt_"+studentFlashlineID).addClass("arrived");
            }
        }

        //attaches event handler for student grabbed from queue as long as you didn't do it
        alertHubProx.client.removeStudentFromQueue = function (studentFlashlineID, adviserFlashlineID, message) {
            if(adviserFlashlineID != instanceAdviserFlashlineID)
            {
                $.jGrowl(studentFlashlineID + " " + message, { life: 2500, theme: 'walkinAvailibility' });
                //remove from our list
                $("#li_" + studentFlashlineID).remove();
            }
            
        }
        //attaches event handler for student returned to queue
        alertHubProx.client.returnStudentToQueue = function(name, message){
            $.jGrowl(name + " " + message, { life: 2500, theme: 'walkinAvailibility' });
            addStudentQueue(name);
        }

        //attaches an even handler for new arrival
        alertHubProx.client.addStudentInQueue = function (name, message) {
            $.jGrowl(name + " " + message, { life: 2500, theme: 'walkinAvailibility' });
            playAlert();
            addStudentQueue(name);
        };

        //attaches event handlers for advisers in and out of walkin queue FROM ADMINISTRATOR
        alertHubProx.client.forceAddAdviserInQueue= function (name, message) {
            if(name != instanceAdviserFlashlineID )
            {
                $.jGrowl(name + " " + message, { life: 2500, theme: 'walkinAvailibility' });
            }
            else{
                //this means that the adviser who was force added is the current adviser
                var availableStatus = $("#walkin_button i");
                if(availableStatus.hasClass('inactive_foot')){
                    availableStatus.removeClass('inactive_foot');
                }
                availableStatus.addClass('active_foot');

                $.jGrowl("You've been force added from the walkin queue", { life: 2500, theme: 'walkinAvailibility' });
            }
        };

        alertHubProx.client.forceRemoveAdviserFromQueue = function(name, message){
            if(name != instanceAdviserFlashlineID)
            {
                $.jGrowl(name + " " + message, { life: 2500, theme: 'walkinAvailibility' });
            }
            else{
                //this means that the adsier that was force removed is the current adviser
                var availableStatus = $("#walkin_button i");
                if(availableStatus.hasClass('active_foot')){
                    availableStatus.removeClass('active_foot');
                }
                availableStatus.addClass('inactive_foot');
                //lets them know they were force removed
                $.jGrowl("You've been force removed from the walkin queue", { life: 2500, theme: 'walkinAvailibility' });
            }
        }

        //seeds walkin availablity with what is in database with their walkin information
        var existingAvailibility = @Html.Raw(JsonConvert.SerializeObject(Model.isWalkinAtLogin));
        if(existingAvailibility)
        {
            //sets foot as green by default
            var availableStatus = $("#walkin_button i");
            availableStatus.removeClass('inactive_foot');
            availableStatus.addClass('active_foot');

        }

        //seeds existing walkin users
        var existingWalkin = @Html.Raw(JsonConvert.SerializeObject(Model.currentWalkinQueueFlashline));
        for(var i = 0; i < existingWalkin.length; ++i)
        {
            //check if already loaded in DOM
            if(!$("#li_" + existingWalkin[i]).length)
            {
                addStudentQueue(existingWalkin[i]);
            }
        }

        //puts appointment data in div
        var todaysAppointments = @Html.Raw(JsonConvert.SerializeObject(Model.appointmentData));

        for(var i = 0; i < todaysAppointments.length; ++i)
        {
            var priceInsertText = "<ul id='ul_appt_"+todaysAppointments[i].StudentFlashlineID+"' class='pricing-table appointmentPanel'><li class='title'>"+todaysAppointments[i].StudentFirstName + " " + todaysAppointments[i].StudentLastName+"<i class='fi-arrows-compress right'></i></li><li class='price'>"+todaysAppointments[i].AppointmentStartTime+"</li><li class='bullet-item collapsible'>"+todaysAppointments[i].StudentFlashlineID+"</li><li class='bullet-item collapsible arrivalTime'>N/A</li><li class='cta-button collapsible'><a class='button ' href='#'>No Show</a></li></ul>";
            $("#appointment_schedule").append(priceInsertText);
            //compresses apointment by default
            compressAppointment("ul_appt_"+todaysAppointments[i].StudentFlashlineID);
        }
        //attach click event to arrows
        $(".fi-arrows-compress").click(function(){
            compressAppointment($(this).parent().parent().attr('id'));
        });

        //volume changes and testing
        $("#volumeUp").click(function(){
            updateVolume(0);
        });

        $("#volumeDown").click(function(){
            updateVolume(1);
        });

        $("#test_sound_button").click(function () {
            playAlert();
        });

        //show Home by Default
        showPanel(0);

        //attaching event handlers to top buttons to show/hide correct panels
        $("#home_button").click(function () {
            switchLayout(0);
        });

        $("#appointment_button").click(function () {
            switchLayout(1);
        });

        $("#queue_button").click(function () {
            switchLayout(2);
        });

        $("#walkin_button").click(function () {
            switchLayout(3);
        });



    });

    //************************************************************************
    //CODE FOR CHANGING AND TESTING THE VOLUME

    function updateVolume(upDown){
        var currentVolume = parseInt($("#setVolume").text());
        if(upDown == 0)//increase volume
        {
            if((currentVolume < 100))
            {
                currentVolume = currentVolume + 10;
            }
        }
        else{//decrease volume
            if(currentVolume > 0)
            {
                currentVolume = currentVolume - 10;
            }
        }
        $("#setVolume").html("");
        $("#setVolume").text(currentVolume);
    }


    function playAlert() {
        //resets the alert volume to zero
        $("#alert_sound").prop("volume", 0);

        //gets set volume
        var currentVolume = parseInt($("#setVolume").text())/100;

        //sets comput volume
        $("#alert_sound").prop("volume", currentVolume);
        $("#alert_sound").trigger('play');
    }

    //************************************************************************



    //************************************************************************
    //CODE FOR UPDATING THE LAYOUT
    function switchLayout(buttonID) {
        switch (buttonID) {
            case 0:
                showPanel(0);
                break;
            case 1:
                showPanel(1);
                break;
            case 2:
                showPanel(2);
                break;
            case 3:
                toggleAvailability();
                break;
            default:
                //nothing
        }
    }

    function showPanel(panel) {
        //based on what integer is passed hide other panels and show correct one
        var panels = ["#home_panel", "#appointment_schedule", "#walkin_queue"];
        var buttons = ["#home_button i", "#appointment_button i", "#queue_button i"];
        for (var i = 0; i < 3; ++i) {
            if (panel != i) {
                $(panels[i]).css("display", "none");
                $(buttons[i]).removeClass("iconActive");
            }
            else {
                $(panels[i]).css("display", "block");
                $(buttons[i]).addClass("iconActive");
            }
        }
    }
    //************************************************************************



    //************************************************************************
    //CODE FOR CHANGING SETTINGS
    function submitAdviserSettingChanges(){
        var schedAlert = $("#scheduled_arrival_notification").is(":checked");
        var walkinAlert = $("#walkin_arrival_notification").is(":checked");
        var volumeAlert = parseInt($("#setVolume").text());
        var adviserFlashlineID = @Html.Raw(JsonConvert.SerializeObject(Model.Adviser.FlashlineID));

        var url = '@Url.Action("UpdateSettings")';

        //submit the async call
        $.ajax(
        {
            url: url,
            type: 'POST',
            data: {'adviserFlashlineID': adviserFlashlineID , 'schedAlert': schedAlert, 'walkinAlert': walkinAlert, 'volumeAlert': volumeAlert },
            success: function (data) {
                $.jGrowl("Your settings have been saved", { life: 2500, theme: 'walkinAvailbility' });
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });

    }
    //************************************************************************



    //************************************************************************
    //CODE FOR UPDATING WALKIN AVAILIBILITY
    function toggleAvailability() {
        var availableStatus = $("#walkin_button i");

        //changes status button accordingly
        if (availableStatus.hasClass("inactive_foot")) {
            updateWalkinAdviser(true);
            availableStatus.removeClass("inactive_foot");
            availableStatus.addClass("active_foot");
            $.jGrowl("You are now available for walk-in appointments!", { life: 2500,theme:'walkinAvailibility' });
        }
        else {
            updateWalkinAdviser(false);
            availableStatus.removeClass("active_foot");
            availableStatus.addClass("inactive_foot");
            $.jGrowl("You are no longer available for walk in appointments", { life: 2500, theme: 'walkinAvailibility' });
        }

    }

    function updateWalkinAdviser(isAvailable) {
        var url = '@Url.Action("UpdateStatus")';
        var adviserFlashlineID = @Html.Raw(JsonConvert.SerializeObject(Model.Adviser.FlashlineID));
        var message = '';

        if(isAvailable){
            message = " was added to Available Walkin Advisers";
        }
        else {
            message = " was removed from Available Walkin Adviser"
        }
        $.ajax(
        {
            url: url,
            type: 'POST',
            data: {'adviserFlashlineID': adviserFlashlineID, 'isAvailable': isAvailable},
            success: function (data) {
                //send alert to all subscribed users that adviser was added or removed from queue
                $.connection.hub.start().done(function () {
                    if(isAvailable){
                        alertHubProx.server.adviserInQueue(adviserFlashlineID, message);
                    }
                    else{
                        alertHubProx.server.adviserOutQueue(adviserFlashlineID, message);
                    }

                });
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });
    }
    //************************************************************************

    //************************************************************************
    //CODE FOR DEALING WITH SCHEDULED APPOINTMENTS
    function compressAppointment(apptDiv){
        //adds and removes correct icons
        $("#"+apptDiv).find(".fi-arrows-compress").removeClass("fi-arrows-compress").addClass("fi-arrows-expand");

        //attach event handler for generated exapnd icon
        $(".fi-arrows-expand").click(function(){
            expandAppointment($(this).parent().parent().attr('id'));
        });

        //hide child li nodes
        $("#"+apptDiv).children(".collapsible").hide();
    }

    function expandAppointment(apptDiv){
        //adds and removes correct icons
        $("#"+apptDiv).find(".fi-arrows-expand").removeClass("fi-arrows-expand").addClass("fi-arrows-compress");

        //attach event handler for regenerated compress icon
        $(".fi-arrows-compress").click(function(){
            compressAppointment($(this).parent().parent().attr('id'));
        });

        //show child li nodes with class collapsible
        $("#"+apptDiv).children(".collapsible").show();
    }
    //************************************************************************

    //************************************************************************
    //CODE FOR ADDING AND REMOVING STUDENTS FROM QUEUE
    function addStudentQueue(flashlineID) {
        var liText = "<li class='accordion-navigation' id='li_"+flashlineID+"'><a>"+flashlineID+"<i class='fi-checkbox right'></i></a></li>";
        $("#walkin_student_queue_ul").append(liText);

        //attaches event handler for removing student walkin
        $(".fi-checkbox").click(function(){
            removeStudentQueue($(this).parent().text());
        });
    }
    function removeStudentQueue(flashlineID){

        //remove from our list
        $("#li_" + flashlineID).remove();

        //call hub function to remove student from walkin queueue for other clients
        alertHubProx.server.studentOutQueue(flashlineID, instanceAdviserFlashlineID, " was grabbed from queue by an adviser");

        //ajax call to remove from database table
        var url = '@Url.Action("RemoveStudentFromWalkin")';
        $.ajax(
        {
            url: url,
            type: 'POST',
            data: {'studentFlashlineID': flashlineID},
            success: function (data) {
                $.jGrowl("You have successfully grabbed "+flashlineID+" from the queue", { life: 2500, theme: 'walkinAvailibility' });
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });

        //add div to calendar in case you need to put back
        var ulText = "<ul id='ul_"+flashlineID+"' class='pricing-table walkinPanel'><li class='title'>"+flashlineID+"@@kent.edu<i class='fi-trash right'></i></li></ul>";
        $("#grabbed_walkin_appointments").append(ulText);

        //add handler to trash can on div
        $(".fi-trash").click(function(){
            returnStudentToQueue($(this).parent().text());
        });
    }

    function returnStudentToQueue(flashlineID){
        //works with flashlind id containing email
        String(flashlineID);
        var positionOfAt = flashlineID.lastIndexOf("@@");
        var finalFlashline = flashlineID.slice(0,positionOfAt);

        //removes walkin bar from calendar
        $("#ul_" + finalFlashline).remove();

        //sends alert to all subscribers that student was returned to queue
        alertHubProx.server.studentReturnedQueue(finalFlashline, " was placed back into the walkin queue");

        //ajax call toput student back in database table
        var url = '@Url.Action("ReturnStudentToQueue")';
        $.ajax(
        {
            url: url,
            type: 'POST',
            data: {'studentFlashlineID': finalFlashline},
            success: function (data) {
                $.jGrowl("You have successfully placed "+finalFlashline+" back in the queue", { life: 2500, theme: 'walkinAvailibility' });
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });
    }
</script>
}

<style>

    .alert{
        background-color:#132B8B !important;
    }
    #test_sound_button {
        background-color: #132B8B;
    }

    /* appointment panel styling */
    .arrived{
        border: 5px solid #CCCCCC !important;
    }
    .arrived> .title{
        background-color:#9e2345 !important;
    }

    .appointment_panel_x {
        /*font-size: 2.5rem;*/
    }

    .appointmentPanel{
       border: 5px solid #002664;
    }
    .appointmentPanel > .title{
        background-color:#F9B71B;
    }
     .appointmentPanel > .cta-button > a{
        background-color: #002664;    
     }
    .appointmentPanel > .price {
        font-size: 1em;
    }

    .walkinPanel{
        border: 5px solid #009DDB;
    }

    .walkinPanel > .cta-button > a {
        background-color:#009DDB; 
    }

    .walkinPanel > .title{
        background-color:#002664;
    }
    .walkinPanel > .price {
        font-size: 1em;
    }


    /* resizing icons*/
    .fi-checkbox{
        font-size: 25px;
    }
    /* styling icons*/
    .fi-trash:hover{
        cursor:pointer;
    }

    /* foot classes*/
    .inactive_foot{
        color:#9e2345 !important;
    }
    .active_foot{
        color: #879637 !important;
    }

    .fi-arrows-compress{
        cursor:pointer;
    }
    .fi-arrows-expand{
        cursor:pointer;
    }
</style>


<!-- top nav -->
<div id="navbar" class="icon-bar four-up">

    <a id="home_button" class="item">
        <i class="fi-home iconActive"></i>
    </a>
    <a id="appointment_button" class="item">
        <i class="fi-calendar"></i>
    </a>
    <a id="queue_button" class="item">
        <i class="fi-torsos"></i>
    </a>
    <a id="walkin_button" class="item">
        <i class="fi-foot inactive_foot"></i>
    </a>
    <!--<a id = "administrator_options" class = "item">
      <i class = "fi-widget"></i>
    </a>-->
</div>
<!-- end top nav -->

<div class="row">

    <div id="home_panel" class="small-11 small-centered columns">
        <fieldset>
            <legend>Notification Settings</legend>

            Popup for Scheduled Appointments Arrivals:
            <div class="switch">
                @if (Model.Adviser.ShowApptNotification) { 
                    <input id="scheduled_arrival_notification" type="checkbox" checked />
                }
                else
                {
                    <input id="scheduled_arrival_notification" type="checkbox" />
                }
                <label for="scheduled_arrival_notification"></label>
            </div>
            <br /><br />

            Popup for Walk-in Arrivals:
            <div class="switch">
                @if (Model.Adviser.ShowWalkinNotification) {
                    <input id="walkin_arrival_notification" type="checkbox" checked>
                }
                else
                {
                    <input id="walkin_arrival_notification" type="checkbox">
                }
                <label for="walkin_arrival_notification"></label>
            </div>
            <br /><br />

            Alert Sound Volume:
            <div class="row" style="margin-left:5px;">

                <ul class="button-group">
                    <li><a id="volumeUp" class="button"><i class="fi-volume"></i></a></li>
                    <li><a id="volumeDown" class="button"><i class="fi-volume-none"></i></a></li>
                    <li><a class="button alert"><span id="setVolume">@Model.Adviser.NotificationVolume</span></a></li>
                </ul>
            </div><br /><br />
            <a id="test_sound_button" class="button alert"><span class="show-for-medium-up">Test Volume</span> <i class="fi-sound"></i></a>
            <audio id="alert_sound" src="~/Content/sounds/music_marimba_chord.wav"></audio>
            <br/><br/>

            <a id="save_changes_button" onClick="submitAdviserSettingChanges()" class="button alert"><span class="show-for-medium-up">Save changes</span> <i class="fi-lock"></i></a>
            <br/><br/>
            @if (Model.Adviser.FlashlineID == "jdrake")//(Model.isAdmin)
            {
                <a id="loginAsAdmin" href='@Url.Action("Index","Admin")' class="button alert"><span class="show-for-medium-up">Login as Admin </span> <i class="fi-shield"></i></a>
            }
            
        </fieldset>
    </div>

    <div id="appointment_schedule" style="display:none;" class="medium-8 text-center medium-centered columns">
        <div id="grabbed_walkin_appointments">

        </div>
        <div id="walkinDivider" style="width: 100%; margin-top: 30px; margin-bottom: 30px;" class="medium-8 medium-centered columns">

        </div>

    </div>


    <div id="walkin_queue" style="display:none;" class="small-11 small-centered columns">
        <dl class="sub-nav">
            <dt>Filter:</dt>
            <dd class="active"><a href="#">All</a></dd>
            <dd><a href="#">Senior</a></dd>
            <dd><a href="#">International</a></dd>
        </dl>
        <ul id="walkin_student_queue_ul"  class="accordion" data-accordion>
        </ul>
    </div>
</div>

<!-- end main wrap -->
